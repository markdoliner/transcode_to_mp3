#!/usr/bin/env python3

"""
A command line program that looks for music files in path(s) given on
the command line and copies them to the local directory, transcoding
to mp3 if necessary.

Available at https://github.com/markdoliner/transcode_to_mp3

Licensed as follows (this is the 2-clause BSD license, aka
"Simplified BSD License" or "FreeBSD License"):

Copyright (c) 2014, 2023, 2024, Mark Doliner
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
- Redistributions of source code must retain the above copyright notice,
  this list of conditions and the following disclaimer.
- Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
"""

import errno
import multiprocessing
import os
import os.path
import queue
import re
import shutil
import subprocess
import sys
import threading
from typing import TYPE_CHECKING

try:
    import mutagen
except ImportError:
    sys.stderr.write(
        "Error: Could not import mutagen\n"
        "On Ubuntu: apt-get install python3-mutagen\n"
    )
    sys.exit(1)

try:
    import psutil

    if TYPE_CHECKING:
        from psutil._common import sdiskpart
except ImportError:
    sys.stderr.write(
        "Error: Could not import psutil\n" "On Ubuntu: apt-get install python3-psutil\n"
    )
    sys.exit(1)


_DESIRED_TAGS = [
    "album",
    "artist",
    "date",
    "discnumber",
    "performer",
    "title",
    "tracknumber",
]


def _get_filesystem_type(path: str) -> str:
    """Returns a short string describing the name of the filesystem type where
    the given path lives.

    e.x.: vfat
    e.x.: ext4
    """
    path = os.path.abspath(path)
    matches: list[sdiskpart] = []

    # Iterate through all partitions and keep track of potential matches.
    for partition in psutil.disk_partitions():
        if path.startswith(partition.mountpoint):
            matches.append(partition)

    # Return whichever patition has the deepest mount point.
    longest_matched_partition = max(
        matches, key=lambda partition: len(partition.mountpoint)
    )
    return longest_matched_partition.fstype


def _makedirs_if_not_exist(path: str) -> None:
    """Recursively creates a given directory if it does not exist."""
    try:
        os.makedirs(path)
    except OSError as exc:
        if exc.errno == errno.EEXIST and os.path.isdir(path):
            pass
        else:
            raise


def _read_tags(source_filename: str) -> dict[str, str]:
    """Returns a dict containing any non-null tags out of the list of
    _DESIRED_TAGS from the given file.

    Allows mutagen to attempt to guess which type of tags to read.
    """
    try:
        file_info = mutagen.File(source_filename, easy=True)
    except mutagen.mp3.HeaderNotFoundError as exc:
        print(f"Could not find mp3 header in {source_filename}: {exc}")
        return {}
    if not file_info:
        return {}

    # Copy desired tags from file_info to tags.
    tags: dict[str, str] = {}
    for desired_tag in _DESIRED_TAGS:
        if desired_tag in file_info:
            tag = file_info[desired_tag][0]
            if tag:
                tags[desired_tag] = tag
    return tags


def _transcode_file(basedir: str, source_filename: str) -> None:
    """Copies the given file to the destination directory, decoding and
    re-encoding as an mp3, if necessary.
    """

    # TODO: Allow user to specify destination directory?
    destdir = "."
    root, ext = os.path.splitext(source_filename)

    # Determine destination filename.
    destination_filename = root.replace(basedir, destdir) + ".mp3"

    # Strip characters not allowed on vfat filesystems from the destination
    # filename.
    fstype = _get_filesystem_type(destination_filename)
    if fstype == "vfat":
        destination_filename = re.sub(r'[\?\*"\:]', "_", destination_filename)

    # If destination file already exists, do nothing.
    if os.path.isfile(destination_filename):
        return

    # Create destination directory.
    _makedirs_if_not_exist(os.path.dirname(destination_filename))

    if ext == ".mp3":
        # File is already an mp3. Just copy it to the destination directory.
        shutil.copy2(source_filename, destination_filename)
        return

    # Read tags.
    tags = _read_tags(source_filename)

    # If we have date but not year, then set year based on date.
    if "year" not in tags and "date" in tags:
        tags["year"] = tags["date"][:4]

    if ext not in [".flac", ".m4a", ".ogg"]:
        # Unknown file type. Skip it.
        sys.stderr.write(f"Skipping file of unknown type: {source_filename}\n")
        return

    # Build the decode command. Prints decoded output to stdout. Prints only
    # error messages to stderr.
    decode_cmd = [
        "ffmpeg",
        "-loglevel",
        "error",
        "-nostdin",
        "-i",
        source_filename,
        "-f",
        "wav",
        "-",
    ]

    # Build encode command.
    encode_cmd = ["lame", "-V", "2", "--quiet"]
    if "album" in tags:
        encode_cmd.extend(["--tl", tags["album"]])
    if "artist" in tags:
        encode_cmd.extend(["--ta", tags["artist"]])
    if "discnumber" in tags:
        encode_cmd.extend(["--tv", f"TPOS={tags['discnumber']}"])
    if "title" in tags:
        encode_cmd.extend(["--tt", tags["title"]])
    if "tracknumber" in tags:
        encode_cmd.extend(["--tn", tags["tracknumber"]])
    if "year" in tags:
        encode_cmd.extend(["--ty", tags["year"]])
    encode_cmd.append("-")  # Encode data from stdin.
    encode_cmd.append(destination_filename)

    # Execute the decoder.
    decode_proc = subprocess.Popen(decode_cmd, stdout=subprocess.PIPE)

    # Execute the encoder. The decoder's output is piped to the encoder's input.
    try:
        encode_proc = subprocess.Popen(
            encode_cmd, stdin=decode_proc.stdout, stdout=subprocess.PIPE
        )
    except OSError as exc:
        sys.stderr.write(
            f"Could not run {encode_cmd} while trying to encode {source_filename}: {exc}\n"
        )
        return

    decode_proc.stdout.close()  # Allow p1 to receive a SIGPIPE if p2 exits.
    decode_proc.wait()
    encode_proc.wait()

    # Check return codes.
    if decode_proc.returncode != 0 or encode_proc.returncode != 0:
        sys.stderr.write(f"Error: Could not transcode {source_filename}\n")
        if os.path.exists(destination_filename):
            os.remove(destination_filename)


class WorkerThread(threading.Thread):
    """A thread that pops items off the given queue and transcodes
    them one at a time.

    Exits when the queue is empty.
    """

    def __init__(self, basedir: str, files_to_be_transcoded: queue.Queue[str]) -> None:
        threading.Thread.__init__(self)
        self.basedir = basedir
        self.files_to_be_transcoded = files_to_be_transcoded

    def run(self) -> None:
        while True:
            try:
                path = self.files_to_be_transcoded.get_nowait()
                _transcode_file(self.basedir, path)
                self.files_to_be_transcoded.task_done()
            except queue.Empty:
                # No more files to transcode therefore no more work for this
                # thread, so stop looping.
                break


def _transcode_paths(basedir: str, paths: set[str]) -> None:
    """Iterates over the list of paths and transcodes or copies files using
    a thread pool.

    Directories will be walked and all files will be transcoded or copied,
    as appropriate.
    """
    files_to_be_transcoded = queue.Queue[str]()

    # Loop through paths, walk directories, and add individual files to the queue.
    for path in paths:
        if os.path.isfile(path):
            files_to_be_transcoded.put(path)
        elif os.path.isdir(path):
            for dirpath, _, filenames in os.walk(path):
                for filename in filenames:
                    files_to_be_transcoded.put(os.path.join(dirpath, filename))
        else:
            print(f"Error: Unknown file '{path}'")

    num_cores = multiprocessing.cpu_count()

    # Start worker threads.
    worker_threads: list[WorkerThread] = []
    for _ in range(0, min(files_to_be_transcoded.qsize(), num_cores * 2)):
        worker_thread = WorkerThread(basedir, files_to_be_transcoded)
        worker_thread.start()
        worker_threads.append(worker_thread)

    # Wait for worker threads to finish.
    for worker_thread in worker_threads:
        worker_thread.join()


def _main(args: list[str]) -> None:
    """The main entry point for this script."""

    # Show usage if no arguments were given on the command line.
    if len(args) < 3:
        print(
            f"Usage: {os.path.basename(sys.argv[0])} <base directory> <file or directory of files> ...\n"
            "    base directory -- The shared ancestor directory of all given files.\n"
            "                      Needed in order to replicate the file hierarchy."
        )
        sys.exit(1)

    basedir = sys.argv[1]
    paths = sys.argv[2:]

    # Normalize paths.
    basedir = os.path.abspath(basedir)
    paths = [os.path.abspath(path) for path in paths]

    # Remove duplicate paths.
    paths = set(paths)

    # Make sure basedir exists.
    if not os.path.isdir(basedir):
        sys.stderr.write(f"Error: {basedir} is not a directory.\n")
        sys.exit(1)

    # Make sure all given paths exist and are children of basedir.
    for path in paths:
        if not os.path.exists(path):
            sys.stderr.write(f"Error: {path} does not exist.\n")
            sys.exit(1)
        if not path.startswith(basedir):
            sys.stderr.write(f"Error: {path} is not a subdirectory of {basedir}\n")
            sys.exit(1)

    # Transcode all paths.
    _transcode_paths(basedir, paths)


if __name__ == "__main__":
    try:
        _main(sys.argv)
    except KeyboardInterrupt:
        pass
